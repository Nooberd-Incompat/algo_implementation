import json
from solcx import compile_standard, install_solc
import sys
import os

def compile_contract():
    try:
        print("Installing/Verifying Solidity compiler v0.8.19...")
        install_solc('0.8.19')  # Use slightly older version for better compatibility

        with open("contracts/FL_SettlementChannel.sol", "r") as f:
            contract_source_code = f.read()

        print("Compiling contract...")
        compiled_sol = compile_standard(
            {
                "language": "Solidity",
                "sources": {"FL_SettlementChannel.sol": {"content": contract_source_code}},
                "settings": { 
                    "evmVersion": "london",  # Specify EVM version for compatibility
                    "optimizer": {
                        "enabled": True,
                        "runs": 200
                    },
                    "outputSelection": { 
                        "*": { 
                            "*": ["abi", "evm.bytecode.object", "evm.deployedBytecode.object"]
                        }
                    }
                }
            },
            solc_version="0.8.19",
        )

        if "errors" in compiled_sol:
            for error in compiled_sol["errors"]:
                if error["severity"] == "error":
                    print(f"Solidity Compilation Error:\n{error['formattedMessage']}")
                    sys.exit("Contract compilation failed.")
                elif error["severity"] == "warning":
                    print(f"Warning: {error['formattedMessage']}")

        contract_data = compiled_sol["contracts"]["FL_SettlementChannel.sol"]["FL_SettlementChannel"]
        bytecode = contract_data.get("evm", {}).get("bytecode", {}).get("object")
        if not bytecode:
             raise RuntimeError("Bytecode not found in compilation output.")

        # Validate bytecode
        if len(bytecode) < 10:
            raise RuntimeError("Generated bytecode is too short, compilation may have failed.")

        os.makedirs("build", exist_ok=True)
        output_data = {
            "abi": contract_data["abi"], 
            "bytecode": bytecode,
            "deployedBytecode": contract_data.get("evm", {}).get("deployedBytecode", {}).get("object", "")
        }

        with open("build/compiled_contract.json", "w") as f:
            json.dump(output_data, f, indent=2)

        print(f"Contract compiled successfully!")
        print(f"Bytecode length: {len(bytecode)} characters")
        print(f"Output saved to build/compiled_contract.json")

    except Exception as e:
        print(f"An error occurred: {e}")
        sys.exit(1)

if __name__ == "__main__":
    compile_contract()